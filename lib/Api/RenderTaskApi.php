<?php
/**
 * RenderTaskApi
 * PHP version 5
 *
 * @category Class
 * @package  Looker
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Experimental Looker API 3.1 Preview
 *
 * This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Looker\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Looker\ApiException;
use Looker\Configuration;
use Looker\HeaderSelector;
use Looker\ObjectSerializer;

/**
 * RenderTaskApi Class Doc Comment
 *
 * @category Class
 * @package  Looker
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RenderTaskApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDashboardRenderTask
     *
     * Create Dashboard Render Task
     *
     * @param  int $dashboard_id Id of dashboard to render (required)
     * @param  string $result_format Output type: pdf, png, or jpg (required)
     * @param  \Looker\Model\CreateDashboardRenderTask $body Dashboard render task parameters (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Looker\Model\RenderTask
     */
    public function createDashboardRenderTask($dashboard_id, $result_format, $body, $width, $height, $fields = null)
    {
        list($response) = $this->createDashboardRenderTaskWithHttpInfo($dashboard_id, $result_format, $body, $width, $height, $fields);
        return $response;
    }

    /**
     * Operation createDashboardRenderTaskWithHttpInfo
     *
     * Create Dashboard Render Task
     *
     * @param  int $dashboard_id Id of dashboard to render (required)
     * @param  string $result_format Output type: pdf, png, or jpg (required)
     * @param  \Looker\Model\CreateDashboardRenderTask $body Dashboard render task parameters (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Looker\Model\RenderTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDashboardRenderTaskWithHttpInfo($dashboard_id, $result_format, $body, $width, $height, $fields = null)
    {
        $returnType = '\Looker\Model\RenderTask';
        $request = $this->createDashboardRenderTaskRequest($dashboard_id, $result_format, $body, $width, $height, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\RenderTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDashboardRenderTaskAsync
     *
     * Create Dashboard Render Task
     *
     * @param  int $dashboard_id Id of dashboard to render (required)
     * @param  string $result_format Output type: pdf, png, or jpg (required)
     * @param  \Looker\Model\CreateDashboardRenderTask $body Dashboard render task parameters (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDashboardRenderTaskAsync($dashboard_id, $result_format, $body, $width, $height, $fields = null)
    {
        return $this->createDashboardRenderTaskAsyncWithHttpInfo($dashboard_id, $result_format, $body, $width, $height, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDashboardRenderTaskAsyncWithHttpInfo
     *
     * Create Dashboard Render Task
     *
     * @param  int $dashboard_id Id of dashboard to render (required)
     * @param  string $result_format Output type: pdf, png, or jpg (required)
     * @param  \Looker\Model\CreateDashboardRenderTask $body Dashboard render task parameters (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDashboardRenderTaskAsyncWithHttpInfo($dashboard_id, $result_format, $body, $width, $height, $fields = null)
    {
        $returnType = '\Looker\Model\RenderTask';
        $request = $this->createDashboardRenderTaskRequest($dashboard_id, $result_format, $body, $width, $height, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDashboardRenderTask'
     *
     * @param  int $dashboard_id Id of dashboard to render (required)
     * @param  string $result_format Output type: pdf, png, or jpg (required)
     * @param  \Looker\Model\CreateDashboardRenderTask $body Dashboard render task parameters (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createDashboardRenderTaskRequest($dashboard_id, $result_format, $body, $width, $height, $fields = null)
    {
        // verify the required parameter 'dashboard_id' is set
        if ($dashboard_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dashboard_id when calling createDashboardRenderTask'
            );
        }
        // verify the required parameter 'result_format' is set
        if ($result_format === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $result_format when calling createDashboardRenderTask'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createDashboardRenderTask'
            );
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling createDashboardRenderTask'
            );
        }
        // verify the required parameter 'height' is set
        if ($height === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $height when calling createDashboardRenderTask'
            );
        }

        $resourcePath = '/render_tasks/dashboards/{dashboard_id}/{result_format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($dashboard_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dashboard_id' . '}',
                ObjectSerializer::toPathValue($dashboard_id),
                $resourcePath
            );
        }
        // path params
        if ($result_format !== null) {
            $resourcePath = str_replace(
                '{' . 'result_format' . '}',
                ObjectSerializer::toPathValue($result_format),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLookRenderTask
     *
     * Create Look Render Task
     *
     * @param  int $look_id Id of look to render (required)
     * @param  string $result_format Output type: png, or jpg (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Looker\Model\RenderTask
     */
    public function createLookRenderTask($look_id, $result_format, $width, $height, $fields = null)
    {
        list($response) = $this->createLookRenderTaskWithHttpInfo($look_id, $result_format, $width, $height, $fields);
        return $response;
    }

    /**
     * Operation createLookRenderTaskWithHttpInfo
     *
     * Create Look Render Task
     *
     * @param  int $look_id Id of look to render (required)
     * @param  string $result_format Output type: png, or jpg (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Looker\Model\RenderTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLookRenderTaskWithHttpInfo($look_id, $result_format, $width, $height, $fields = null)
    {
        $returnType = '\Looker\Model\RenderTask';
        $request = $this->createLookRenderTaskRequest($look_id, $result_format, $width, $height, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\RenderTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLookRenderTaskAsync
     *
     * Create Look Render Task
     *
     * @param  int $look_id Id of look to render (required)
     * @param  string $result_format Output type: png, or jpg (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLookRenderTaskAsync($look_id, $result_format, $width, $height, $fields = null)
    {
        return $this->createLookRenderTaskAsyncWithHttpInfo($look_id, $result_format, $width, $height, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLookRenderTaskAsyncWithHttpInfo
     *
     * Create Look Render Task
     *
     * @param  int $look_id Id of look to render (required)
     * @param  string $result_format Output type: png, or jpg (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLookRenderTaskAsyncWithHttpInfo($look_id, $result_format, $width, $height, $fields = null)
    {
        $returnType = '\Looker\Model\RenderTask';
        $request = $this->createLookRenderTaskRequest($look_id, $result_format, $width, $height, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLookRenderTask'
     *
     * @param  int $look_id Id of look to render (required)
     * @param  string $result_format Output type: png, or jpg (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLookRenderTaskRequest($look_id, $result_format, $width, $height, $fields = null)
    {
        // verify the required parameter 'look_id' is set
        if ($look_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $look_id when calling createLookRenderTask'
            );
        }
        // verify the required parameter 'result_format' is set
        if ($result_format === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $result_format when calling createLookRenderTask'
            );
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling createLookRenderTask'
            );
        }
        // verify the required parameter 'height' is set
        if ($height === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $height when calling createLookRenderTask'
            );
        }

        $resourcePath = '/render_tasks/looks/{look_id}/{result_format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($look_id !== null) {
            $resourcePath = str_replace(
                '{' . 'look_id' . '}',
                ObjectSerializer::toPathValue($look_id),
                $resourcePath
            );
        }
        // path params
        if ($result_format !== null) {
            $resourcePath = str_replace(
                '{' . 'result_format' . '}',
                ObjectSerializer::toPathValue($result_format),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLookmlDashboardRenderTask
     *
     * Create Lookml Dashboard Render Task
     *
     * @param  string $dashboard_id Id of lookml dashboard to render (required)
     * @param  string $result_format Output type: pdf, png, or jpg (required)
     * @param  \Looker\Model\CreateDashboardRenderTask $body Dashboard render task parameters (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Looker\Model\RenderTask
     */
    public function createLookmlDashboardRenderTask($dashboard_id, $result_format, $body, $width, $height, $fields = null)
    {
        list($response) = $this->createLookmlDashboardRenderTaskWithHttpInfo($dashboard_id, $result_format, $body, $width, $height, $fields);
        return $response;
    }

    /**
     * Operation createLookmlDashboardRenderTaskWithHttpInfo
     *
     * Create Lookml Dashboard Render Task
     *
     * @param  string $dashboard_id Id of lookml dashboard to render (required)
     * @param  string $result_format Output type: pdf, png, or jpg (required)
     * @param  \Looker\Model\CreateDashboardRenderTask $body Dashboard render task parameters (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Looker\Model\RenderTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLookmlDashboardRenderTaskWithHttpInfo($dashboard_id, $result_format, $body, $width, $height, $fields = null)
    {
        $returnType = '\Looker\Model\RenderTask';
        $request = $this->createLookmlDashboardRenderTaskRequest($dashboard_id, $result_format, $body, $width, $height, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\RenderTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLookmlDashboardRenderTaskAsync
     *
     * Create Lookml Dashboard Render Task
     *
     * @param  string $dashboard_id Id of lookml dashboard to render (required)
     * @param  string $result_format Output type: pdf, png, or jpg (required)
     * @param  \Looker\Model\CreateDashboardRenderTask $body Dashboard render task parameters (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLookmlDashboardRenderTaskAsync($dashboard_id, $result_format, $body, $width, $height, $fields = null)
    {
        return $this->createLookmlDashboardRenderTaskAsyncWithHttpInfo($dashboard_id, $result_format, $body, $width, $height, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLookmlDashboardRenderTaskAsyncWithHttpInfo
     *
     * Create Lookml Dashboard Render Task
     *
     * @param  string $dashboard_id Id of lookml dashboard to render (required)
     * @param  string $result_format Output type: pdf, png, or jpg (required)
     * @param  \Looker\Model\CreateDashboardRenderTask $body Dashboard render task parameters (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLookmlDashboardRenderTaskAsyncWithHttpInfo($dashboard_id, $result_format, $body, $width, $height, $fields = null)
    {
        $returnType = '\Looker\Model\RenderTask';
        $request = $this->createLookmlDashboardRenderTaskRequest($dashboard_id, $result_format, $body, $width, $height, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLookmlDashboardRenderTask'
     *
     * @param  string $dashboard_id Id of lookml dashboard to render (required)
     * @param  string $result_format Output type: pdf, png, or jpg (required)
     * @param  \Looker\Model\CreateDashboardRenderTask $body Dashboard render task parameters (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createLookmlDashboardRenderTaskRequest($dashboard_id, $result_format, $body, $width, $height, $fields = null)
    {
        // verify the required parameter 'dashboard_id' is set
        if ($dashboard_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dashboard_id when calling createLookmlDashboardRenderTask'
            );
        }
        // verify the required parameter 'result_format' is set
        if ($result_format === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $result_format when calling createLookmlDashboardRenderTask'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createLookmlDashboardRenderTask'
            );
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling createLookmlDashboardRenderTask'
            );
        }
        // verify the required parameter 'height' is set
        if ($height === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $height when calling createLookmlDashboardRenderTask'
            );
        }

        $resourcePath = '/render_tasks/lookml_dashboards/{dashboard_id}/{result_format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($dashboard_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dashboard_id' . '}',
                ObjectSerializer::toPathValue($dashboard_id),
                $resourcePath
            );
        }
        // path params
        if ($result_format !== null) {
            $resourcePath = str_replace(
                '{' . 'result_format' . '}',
                ObjectSerializer::toPathValue($result_format),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createQueryRenderTask
     *
     * Create Query Render Task
     *
     * @param  int $query_id Id of the query to render (required)
     * @param  string $result_format Output type: png or jpg (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Looker\Model\RenderTask
     */
    public function createQueryRenderTask($query_id, $result_format, $width, $height, $fields = null)
    {
        list($response) = $this->createQueryRenderTaskWithHttpInfo($query_id, $result_format, $width, $height, $fields);
        return $response;
    }

    /**
     * Operation createQueryRenderTaskWithHttpInfo
     *
     * Create Query Render Task
     *
     * @param  int $query_id Id of the query to render (required)
     * @param  string $result_format Output type: png or jpg (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Looker\Model\RenderTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function createQueryRenderTaskWithHttpInfo($query_id, $result_format, $width, $height, $fields = null)
    {
        $returnType = '\Looker\Model\RenderTask';
        $request = $this->createQueryRenderTaskRequest($query_id, $result_format, $width, $height, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\RenderTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\ValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createQueryRenderTaskAsync
     *
     * Create Query Render Task
     *
     * @param  int $query_id Id of the query to render (required)
     * @param  string $result_format Output type: png or jpg (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createQueryRenderTaskAsync($query_id, $result_format, $width, $height, $fields = null)
    {
        return $this->createQueryRenderTaskAsyncWithHttpInfo($query_id, $result_format, $width, $height, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createQueryRenderTaskAsyncWithHttpInfo
     *
     * Create Query Render Task
     *
     * @param  int $query_id Id of the query to render (required)
     * @param  string $result_format Output type: png or jpg (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createQueryRenderTaskAsyncWithHttpInfo($query_id, $result_format, $width, $height, $fields = null)
    {
        $returnType = '\Looker\Model\RenderTask';
        $request = $this->createQueryRenderTaskRequest($query_id, $result_format, $width, $height, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createQueryRenderTask'
     *
     * @param  int $query_id Id of the query to render (required)
     * @param  string $result_format Output type: png or jpg (required)
     * @param  int $width Output width in pixels (required)
     * @param  int $height Output height in pixels (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createQueryRenderTaskRequest($query_id, $result_format, $width, $height, $fields = null)
    {
        // verify the required parameter 'query_id' is set
        if ($query_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query_id when calling createQueryRenderTask'
            );
        }
        // verify the required parameter 'result_format' is set
        if ($result_format === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $result_format when calling createQueryRenderTask'
            );
        }
        // verify the required parameter 'width' is set
        if ($width === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $width when calling createQueryRenderTask'
            );
        }
        // verify the required parameter 'height' is set
        if ($height === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $height when calling createQueryRenderTask'
            );
        }

        $resourcePath = '/render_tasks/queries/{query_id}/{result_format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($query_id !== null) {
            $resourcePath = str_replace(
                '{' . 'query_id' . '}',
                ObjectSerializer::toPathValue($query_id),
                $resourcePath
            );
        }
        // path params
        if ($result_format !== null) {
            $resourcePath = str_replace(
                '{' . 'result_format' . '}',
                ObjectSerializer::toPathValue($result_format),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation renderTask
     *
     * Get Render Task
     *
     * @param  string $render_task_id Id of render task (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Looker\Model\RenderTask
     */
    public function renderTask($render_task_id, $fields = null)
    {
        list($response) = $this->renderTaskWithHttpInfo($render_task_id, $fields);
        return $response;
    }

    /**
     * Operation renderTaskWithHttpInfo
     *
     * Get Render Task
     *
     * @param  string $render_task_id Id of render task (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Looker\Model\RenderTask, HTTP status code, HTTP response headers (array of strings)
     */
    public function renderTaskWithHttpInfo($render_task_id, $fields = null)
    {
        $returnType = '\Looker\Model\RenderTask';
        $request = $this->renderTaskRequest($render_task_id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\RenderTask',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation renderTaskAsync
     *
     * Get Render Task
     *
     * @param  string $render_task_id Id of render task (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renderTaskAsync($render_task_id, $fields = null)
    {
        return $this->renderTaskAsyncWithHttpInfo($render_task_id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation renderTaskAsyncWithHttpInfo
     *
     * Get Render Task
     *
     * @param  string $render_task_id Id of render task (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renderTaskAsyncWithHttpInfo($render_task_id, $fields = null)
    {
        $returnType = '\Looker\Model\RenderTask';
        $request = $this->renderTaskRequest($render_task_id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'renderTask'
     *
     * @param  string $render_task_id Id of render task (required)
     * @param  string $fields Requested fields. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function renderTaskRequest($render_task_id, $fields = null)
    {
        // verify the required parameter 'render_task_id' is set
        if ($render_task_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $render_task_id when calling renderTask'
            );
        }

        $resourcePath = '/render_tasks/{render_task_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($render_task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'render_task_id' . '}',
                ObjectSerializer::toPathValue($render_task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation renderTaskResults
     *
     * Render Task Results
     *
     * @param  string $render_task_id Id of render task (required)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function renderTaskResults($render_task_id)
    {
        list($response) = $this->renderTaskResultsWithHttpInfo($render_task_id);
        return $response;
    }

    /**
     * Operation renderTaskResultsWithHttpInfo
     *
     * Render Task Results
     *
     * @param  string $render_task_id Id of render task (required)
     *
     * @throws \Looker\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function renderTaskResultsWithHttpInfo($render_task_id)
    {
        $returnType = 'string';
        $request = $this->renderTaskResultsRequest($render_task_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Looker\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation renderTaskResultsAsync
     *
     * Render Task Results
     *
     * @param  string $render_task_id Id of render task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renderTaskResultsAsync($render_task_id)
    {
        return $this->renderTaskResultsAsyncWithHttpInfo($render_task_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation renderTaskResultsAsyncWithHttpInfo
     *
     * Render Task Results
     *
     * @param  string $render_task_id Id of render task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renderTaskResultsAsyncWithHttpInfo($render_task_id)
    {
        $returnType = 'string';
        $request = $this->renderTaskResultsRequest($render_task_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'renderTaskResults'
     *
     * @param  string $render_task_id Id of render task (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function renderTaskResultsRequest($render_task_id)
    {
        // verify the required parameter 'render_task_id' is set
        if ($render_task_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $render_task_id when calling renderTaskResults'
            );
        }

        $resourcePath = '/render_tasks/{render_task_id}/results';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($render_task_id !== null) {
            $resourcePath = str_replace(
                '{' . 'render_task_id' . '}',
                ObjectSerializer::toPathValue($render_task_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['image/jpeg', 'image/png', 'application/pdf']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['image/jpeg', 'image/png', 'application/pdf'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
