<?php
/**
 * Space
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Experimental Looker API 3.1 Preview
 *
 * This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Looker\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Space Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Space implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Space';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'content_metadata_id' => 'int',
        'creator_id' => 'int',
        'name' => 'string',
        'is_personal' => 'bool',
        'is_personal_descendant' => 'bool',
        'is_shared_root' => 'bool',
        'is_root' => 'bool',
        'is_users_root' => 'bool',
        'is_user_root' => 'bool',
        'is_embed' => 'bool',
        'is_embed_shared_root' => 'bool',
        'is_embed_users_root' => 'bool',
        'external_id' => 'string',
        'parent_id' => 'int',
        'looks' => '\Swagger\Client\Looker\Model\LookWithDashboards[]',
        'dashboards' => '\Swagger\Client\Looker\Model\DashboardBase[]',
        'can' => 'map[string,bool]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'content_metadata_id' => 'int64',
        'creator_id' => 'int64',
        'name' => null,
        'is_personal' => null,
        'is_personal_descendant' => null,
        'is_shared_root' => null,
        'is_root' => null,
        'is_users_root' => null,
        'is_user_root' => null,
        'is_embed' => null,
        'is_embed_shared_root' => null,
        'is_embed_users_root' => null,
        'external_id' => null,
        'parent_id' => 'int64',
        'looks' => null,
        'dashboards' => null,
        'can' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'content_metadata_id' => 'content_metadata_id',
        'creator_id' => 'creator_id',
        'name' => 'name',
        'is_personal' => 'is_personal',
        'is_personal_descendant' => 'is_personal_descendant',
        'is_shared_root' => 'is_shared_root',
        'is_root' => 'is_root',
        'is_users_root' => 'is_users_root',
        'is_user_root' => 'is_user_root',
        'is_embed' => 'is_embed',
        'is_embed_shared_root' => 'is_embed_shared_root',
        'is_embed_users_root' => 'is_embed_users_root',
        'external_id' => 'external_id',
        'parent_id' => 'parent_id',
        'looks' => 'looks',
        'dashboards' => 'dashboards',
        'can' => 'can'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'content_metadata_id' => 'setContentMetadataId',
        'creator_id' => 'setCreatorId',
        'name' => 'setName',
        'is_personal' => 'setIsPersonal',
        'is_personal_descendant' => 'setIsPersonalDescendant',
        'is_shared_root' => 'setIsSharedRoot',
        'is_root' => 'setIsRoot',
        'is_users_root' => 'setIsUsersRoot',
        'is_user_root' => 'setIsUserRoot',
        'is_embed' => 'setIsEmbed',
        'is_embed_shared_root' => 'setIsEmbedSharedRoot',
        'is_embed_users_root' => 'setIsEmbedUsersRoot',
        'external_id' => 'setExternalId',
        'parent_id' => 'setParentId',
        'looks' => 'setLooks',
        'dashboards' => 'setDashboards',
        'can' => 'setCan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'content_metadata_id' => 'getContentMetadataId',
        'creator_id' => 'getCreatorId',
        'name' => 'getName',
        'is_personal' => 'getIsPersonal',
        'is_personal_descendant' => 'getIsPersonalDescendant',
        'is_shared_root' => 'getIsSharedRoot',
        'is_root' => 'getIsRoot',
        'is_users_root' => 'getIsUsersRoot',
        'is_user_root' => 'getIsUserRoot',
        'is_embed' => 'getIsEmbed',
        'is_embed_shared_root' => 'getIsEmbedSharedRoot',
        'is_embed_users_root' => 'getIsEmbedUsersRoot',
        'external_id' => 'getExternalId',
        'parent_id' => 'getParentId',
        'looks' => 'getLooks',
        'dashboards' => 'getDashboards',
        'can' => 'getCan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['content_metadata_id'] = isset($data['content_metadata_id']) ? $data['content_metadata_id'] : null;
        $this->container['creator_id'] = isset($data['creator_id']) ? $data['creator_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['is_personal'] = isset($data['is_personal']) ? $data['is_personal'] : null;
        $this->container['is_personal_descendant'] = isset($data['is_personal_descendant']) ? $data['is_personal_descendant'] : null;
        $this->container['is_shared_root'] = isset($data['is_shared_root']) ? $data['is_shared_root'] : null;
        $this->container['is_root'] = isset($data['is_root']) ? $data['is_root'] : null;
        $this->container['is_users_root'] = isset($data['is_users_root']) ? $data['is_users_root'] : null;
        $this->container['is_user_root'] = isset($data['is_user_root']) ? $data['is_user_root'] : null;
        $this->container['is_embed'] = isset($data['is_embed']) ? $data['is_embed'] : null;
        $this->container['is_embed_shared_root'] = isset($data['is_embed_shared_root']) ? $data['is_embed_shared_root'] : null;
        $this->container['is_embed_users_root'] = isset($data['is_embed_users_root']) ? $data['is_embed_users_root'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['looks'] = isset($data['looks']) ? $data['looks'] : null;
        $this->container['dashboards'] = isset($data['dashboards']) ? $data['dashboards'] : null;
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['parent_id'] === null) {
            $invalidProperties[] = "'parent_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['parent_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets content_metadata_id
     *
     * @return int
     */
    public function getContentMetadataId()
    {
        return $this->container['content_metadata_id'];
    }

    /**
     * Sets content_metadata_id
     *
     * @param int $content_metadata_id Id of content metadata
     *
     * @return $this
     */
    public function setContentMetadataId($content_metadata_id)
    {
        $this->container['content_metadata_id'] = $content_metadata_id;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param int $creator_id User Id of Creator
     *
     * @return $this
     */
    public function setCreatorId($creator_id)
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Unique Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_personal
     *
     * @return bool
     */
    public function getIsPersonal()
    {
        return $this->container['is_personal'];
    }

    /**
     * Sets is_personal
     *
     * @param bool $is_personal Space is a user's personal space
     *
     * @return $this
     */
    public function setIsPersonal($is_personal)
    {
        $this->container['is_personal'] = $is_personal;

        return $this;
    }

    /**
     * Gets is_personal_descendant
     *
     * @return bool
     */
    public function getIsPersonalDescendant()
    {
        return $this->container['is_personal_descendant'];
    }

    /**
     * Sets is_personal_descendant
     *
     * @param bool $is_personal_descendant Space is descendant of a user's personal space
     *
     * @return $this
     */
    public function setIsPersonalDescendant($is_personal_descendant)
    {
        $this->container['is_personal_descendant'] = $is_personal_descendant;

        return $this;
    }

    /**
     * Gets is_shared_root
     *
     * @return bool
     */
    public function getIsSharedRoot()
    {
        return $this->container['is_shared_root'];
    }

    /**
     * Sets is_shared_root
     *
     * @param bool $is_shared_root Space is the root shared space
     *
     * @return $this
     */
    public function setIsSharedRoot($is_shared_root)
    {
        $this->container['is_shared_root'] = $is_shared_root;

        return $this;
    }

    /**
     * Gets is_root
     *
     * @return bool
     */
    public function getIsRoot()
    {
        return $this->container['is_root'];
    }

    /**
     * Sets is_root
     *
     * @param bool $is_root (DEPRECATED) Space is the root shared space (alias of is_shared_root)
     *
     * @return $this
     */
    public function setIsRoot($is_root)
    {
        $this->container['is_root'] = $is_root;

        return $this;
    }

    /**
     * Gets is_users_root
     *
     * @return bool
     */
    public function getIsUsersRoot()
    {
        return $this->container['is_users_root'];
    }

    /**
     * Sets is_users_root
     *
     * @param bool $is_users_root Space is the root user space
     *
     * @return $this
     */
    public function setIsUsersRoot($is_users_root)
    {
        $this->container['is_users_root'] = $is_users_root;

        return $this;
    }

    /**
     * Gets is_user_root
     *
     * @return bool
     */
    public function getIsUserRoot()
    {
        return $this->container['is_user_root'];
    }

    /**
     * Sets is_user_root
     *
     * @param bool $is_user_root (DEPRECATED) Space is the root user space (alias of is_users_root
     *
     * @return $this
     */
    public function setIsUserRoot($is_user_root)
    {
        $this->container['is_user_root'] = $is_user_root;

        return $this;
    }

    /**
     * Gets is_embed
     *
     * @return bool
     */
    public function getIsEmbed()
    {
        return $this->container['is_embed'];
    }

    /**
     * Sets is_embed
     *
     * @param bool $is_embed Space is an embed space
     *
     * @return $this
     */
    public function setIsEmbed($is_embed)
    {
        $this->container['is_embed'] = $is_embed;

        return $this;
    }

    /**
     * Gets is_embed_shared_root
     *
     * @return bool
     */
    public function getIsEmbedSharedRoot()
    {
        return $this->container['is_embed_shared_root'];
    }

    /**
     * Sets is_embed_shared_root
     *
     * @param bool $is_embed_shared_root Space is the root embed shared space
     *
     * @return $this
     */
    public function setIsEmbedSharedRoot($is_embed_shared_root)
    {
        $this->container['is_embed_shared_root'] = $is_embed_shared_root;

        return $this;
    }

    /**
     * Gets is_embed_users_root
     *
     * @return bool
     */
    public function getIsEmbedUsersRoot()
    {
        return $this->container['is_embed_users_root'];
    }

    /**
     * Sets is_embed_users_root
     *
     * @param bool $is_embed_users_root Space is the root embed users space
     *
     * @return $this
     */
    public function setIsEmbedUsersRoot($is_embed_users_root)
    {
        $this->container['is_embed_users_root'] = $is_embed_users_root;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id Embedder's Id if this space was autogenerated as an embedding shared space via 'external_group_id' in an SSO embed login
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id Id of Parent
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets looks
     *
     * @return \Swagger\Client\Looker\Model\LookWithDashboards[]
     */
    public function getLooks()
    {
        return $this->container['looks'];
    }

    /**
     * Sets looks
     *
     * @param \Swagger\Client\Looker\Model\LookWithDashboards[] $looks Looks
     *
     * @return $this
     */
    public function setLooks($looks)
    {
        $this->container['looks'] = $looks;

        return $this;
    }

    /**
     * Gets dashboards
     *
     * @return \Swagger\Client\Looker\Model\DashboardBase[]
     */
    public function getDashboards()
    {
        return $this->container['dashboards'];
    }

    /**
     * Sets dashboards
     *
     * @param \Swagger\Client\Looker\Model\DashboardBase[] $dashboards Dashboards
     *
     * @return $this
     */
    public function setDashboards($dashboards)
    {
        $this->container['dashboards'] = $dashboards;

        return $this;
    }

    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


