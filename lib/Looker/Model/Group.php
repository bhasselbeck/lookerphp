<?php
/**
 * Group
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Experimental Looker API 3.1 Preview
 *
 * This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Looker\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Group Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Group implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Group';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'user_count' => 'int',
        'contains_current_user' => 'bool',
        'externally_managed' => 'bool',
        'include_by_default' => 'bool',
        'external_group_id' => 'string',
        'can_add_to_content_metadata' => 'bool',
        'can' => 'map[string,bool]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'user_count' => 'int64',
        'contains_current_user' => null,
        'externally_managed' => null,
        'include_by_default' => null,
        'external_group_id' => null,
        'can_add_to_content_metadata' => null,
        'can' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'user_count' => 'user_count',
        'contains_current_user' => 'contains_current_user',
        'externally_managed' => 'externally_managed',
        'include_by_default' => 'include_by_default',
        'external_group_id' => 'external_group_id',
        'can_add_to_content_metadata' => 'can_add_to_content_metadata',
        'can' => 'can'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'user_count' => 'setUserCount',
        'contains_current_user' => 'setContainsCurrentUser',
        'externally_managed' => 'setExternallyManaged',
        'include_by_default' => 'setIncludeByDefault',
        'external_group_id' => 'setExternalGroupId',
        'can_add_to_content_metadata' => 'setCanAddToContentMetadata',
        'can' => 'setCan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'user_count' => 'getUserCount',
        'contains_current_user' => 'getContainsCurrentUser',
        'externally_managed' => 'getExternallyManaged',
        'include_by_default' => 'getIncludeByDefault',
        'external_group_id' => 'getExternalGroupId',
        'can_add_to_content_metadata' => 'getCanAddToContentMetadata',
        'can' => 'getCan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['user_count'] = isset($data['user_count']) ? $data['user_count'] : null;
        $this->container['contains_current_user'] = isset($data['contains_current_user']) ? $data['contains_current_user'] : null;
        $this->container['externally_managed'] = isset($data['externally_managed']) ? $data['externally_managed'] : null;
        $this->container['include_by_default'] = isset($data['include_by_default']) ? $data['include_by_default'] : null;
        $this->container['external_group_id'] = isset($data['external_group_id']) ? $data['external_group_id'] : null;
        $this->container['can_add_to_content_metadata'] = isset($data['can_add_to_content_metadata']) ? $data['can_add_to_content_metadata'] : null;
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of group
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets user_count
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->container['user_count'];
    }

    /**
     * Sets user_count
     *
     * @param int $user_count Number of users included in this group
     *
     * @return $this
     */
    public function setUserCount($user_count)
    {
        $this->container['user_count'] = $user_count;

        return $this;
    }

    /**
     * Gets contains_current_user
     *
     * @return bool
     */
    public function getContainsCurrentUser()
    {
        return $this->container['contains_current_user'];
    }

    /**
     * Sets contains_current_user
     *
     * @param bool $contains_current_user Currently logged in user is group member
     *
     * @return $this
     */
    public function setContainsCurrentUser($contains_current_user)
    {
        $this->container['contains_current_user'] = $contains_current_user;

        return $this;
    }

    /**
     * Gets externally_managed
     *
     * @return bool
     */
    public function getExternallyManaged()
    {
        return $this->container['externally_managed'];
    }

    /**
     * Sets externally_managed
     *
     * @param bool $externally_managed Group membership controlled outside of Looker
     *
     * @return $this
     */
    public function setExternallyManaged($externally_managed)
    {
        $this->container['externally_managed'] = $externally_managed;

        return $this;
    }

    /**
     * Gets include_by_default
     *
     * @return bool
     */
    public function getIncludeByDefault()
    {
        return $this->container['include_by_default'];
    }

    /**
     * Sets include_by_default
     *
     * @param bool $include_by_default New users are added to this group by default
     *
     * @return $this
     */
    public function setIncludeByDefault($include_by_default)
    {
        $this->container['include_by_default'] = $include_by_default;

        return $this;
    }

    /**
     * Gets external_group_id
     *
     * @return string
     */
    public function getExternalGroupId()
    {
        return $this->container['external_group_id'];
    }

    /**
     * Sets external_group_id
     *
     * @param string $external_group_id External Id group if embed group
     *
     * @return $this
     */
    public function setExternalGroupId($external_group_id)
    {
        $this->container['external_group_id'] = $external_group_id;

        return $this;
    }

    /**
     * Gets can_add_to_content_metadata
     *
     * @return bool
     */
    public function getCanAddToContentMetadata()
    {
        return $this->container['can_add_to_content_metadata'];
    }

    /**
     * Sets can_add_to_content_metadata
     *
     * @param bool $can_add_to_content_metadata Group can be used in content access controls
     *
     * @return $this
     */
    public function setCanAddToContentMetadata($can_add_to_content_metadata)
    {
        $this->container['can_add_to_content_metadata'] = $can_add_to_content_metadata;

        return $this;
    }

    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


