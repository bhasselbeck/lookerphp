<?php
/**
 * DialectInfoOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Experimental Looker API 3.1 Preview
 *
 * This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DialectInfoOptions Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DialectInfoOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DialectInfoOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timezone' => 'bool',
        'schema' => 'bool',
        'ssl' => 'bool',
        'auth' => 'bool',
        'host' => 'bool',
        'tmp_table' => 'bool',
        'project_name' => 'bool',
        'oauth_credentials' => 'bool',
        'additional_params' => 'bool',
        'username_required' => 'bool',
        'can' => 'map[string,bool]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'timezone' => null,
        'schema' => null,
        'ssl' => null,
        'auth' => null,
        'host' => null,
        'tmp_table' => null,
        'project_name' => null,
        'oauth_credentials' => null,
        'additional_params' => null,
        'username_required' => null,
        'can' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timezone' => 'timezone',
        'schema' => 'schema',
        'ssl' => 'ssl',
        'auth' => 'auth',
        'host' => 'host',
        'tmp_table' => 'tmp_table',
        'project_name' => 'project_name',
        'oauth_credentials' => 'oauth_credentials',
        'additional_params' => 'additional_params',
        'username_required' => 'username_required',
        'can' => 'can'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timezone' => 'setTimezone',
        'schema' => 'setSchema',
        'ssl' => 'setSsl',
        'auth' => 'setAuth',
        'host' => 'setHost',
        'tmp_table' => 'setTmpTable',
        'project_name' => 'setProjectName',
        'oauth_credentials' => 'setOauthCredentials',
        'additional_params' => 'setAdditionalParams',
        'username_required' => 'setUsernameRequired',
        'can' => 'setCan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timezone' => 'getTimezone',
        'schema' => 'getSchema',
        'ssl' => 'getSsl',
        'auth' => 'getAuth',
        'host' => 'getHost',
        'tmp_table' => 'getTmpTable',
        'project_name' => 'getProjectName',
        'oauth_credentials' => 'getOauthCredentials',
        'additional_params' => 'getAdditionalParams',
        'username_required' => 'getUsernameRequired',
        'can' => 'getCan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['schema'] = isset($data['schema']) ? $data['schema'] : null;
        $this->container['ssl'] = isset($data['ssl']) ? $data['ssl'] : null;
        $this->container['auth'] = isset($data['auth']) ? $data['auth'] : null;
        $this->container['host'] = isset($data['host']) ? $data['host'] : null;
        $this->container['tmp_table'] = isset($data['tmp_table']) ? $data['tmp_table'] : null;
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['oauth_credentials'] = isset($data['oauth_credentials']) ? $data['oauth_credentials'] : null;
        $this->container['additional_params'] = isset($data['additional_params']) ? $data['additional_params'] : null;
        $this->container['username_required'] = isset($data['username_required']) ? $data['username_required'] : null;
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets timezone
     *
     * @return bool
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param bool $timezone Has timezone support
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets schema
     *
     * @return bool
     */
    public function getSchema()
    {
        return $this->container['schema'];
    }

    /**
     * Sets schema
     *
     * @param bool $schema Has schema support
     *
     * @return $this
     */
    public function setSchema($schema)
    {
        $this->container['schema'] = $schema;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return bool
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param bool $ssl Has SSL support
     *
     * @return $this
     */
    public function setSsl($ssl)
    {
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return bool
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param bool $auth Has auth support
     *
     * @return $this
     */
    public function setAuth($auth)
    {
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets host
     *
     * @return bool
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param bool $host Has host support
     *
     * @return $this
     */
    public function setHost($host)
    {
        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets tmp_table
     *
     * @return bool
     */
    public function getTmpTable()
    {
        return $this->container['tmp_table'];
    }

    /**
     * Sets tmp_table
     *
     * @param bool $tmp_table Has tmp table support
     *
     * @return $this
     */
    public function setTmpTable($tmp_table)
    {
        $this->container['tmp_table'] = $tmp_table;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return bool
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param bool $project_name Has project name support
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets oauth_credentials
     *
     * @return bool
     */
    public function getOauthCredentials()
    {
        return $this->container['oauth_credentials'];
    }

    /**
     * Sets oauth_credentials
     *
     * @param bool $oauth_credentials Has OAuth support
     *
     * @return $this
     */
    public function setOauthCredentials($oauth_credentials)
    {
        $this->container['oauth_credentials'] = $oauth_credentials;

        return $this;
    }

    /**
     * Gets additional_params
     *
     * @return bool
     */
    public function getAdditionalParams()
    {
        return $this->container['additional_params'];
    }

    /**
     * Sets additional_params
     *
     * @param bool $additional_params Has additional params support
     *
     * @return $this
     */
    public function setAdditionalParams($additional_params)
    {
        $this->container['additional_params'] = $additional_params;

        return $this;
    }

    /**
     * Gets username_required
     *
     * @return bool
     */
    public function getUsernameRequired()
    {
        return $this->container['username_required'];
    }

    /**
     * Sets username_required
     *
     * @param bool $username_required Username is required
     *
     * @return $this
     */
    public function setUsernameRequired($username_required)
    {
        $this->container['username_required'] = $username_required;

        return $this;
    }

    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


