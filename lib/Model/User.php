<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Experimental Looker API 3.1 Preview
 *
 * This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class User implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'display_name' => 'string',
        'email' => 'string',
        'is_disabled' => 'bool',
        'avatar_url' => 'string',
        'home_space_id' => 'string',
        'personal_space_id' => 'int',
        'embed_group_space_id' => 'int',
        'access_filters' => '\Swagger\Client\Model\AccessFilter[]',
        'credentials_email' => '\Swagger\Client\Model\CredentialsEmail',
        'credentials_totp' => '\Swagger\Client\Model\CredentialsTotp',
        'credentials_ldap' => '\Swagger\Client\Model\CredentialsLDAP',
        'credentials_google' => '\Swagger\Client\Model\CredentialsGoogle',
        'credentials_saml' => '\Swagger\Client\Model\CredentialsSaml',
        'credentials_oidc' => '\Swagger\Client\Model\CredentialsOIDC',
        'credentials_api' => '\Swagger\Client\Model\CredentialsApi',
        'credentials_api3' => '\Swagger\Client\Model\CredentialsApi3[]',
        'credentials_embed' => '\Swagger\Client\Model\CredentialsEmbed[]',
        'credentials_looker_openid' => '\Swagger\Client\Model\CredentialsLookerOpenid',
        'sessions' => '\Swagger\Client\Model\Session[]',
        'role_ids' => 'int[]',
        'group_ids' => 'int[]',
        'presumed_looker_employee' => 'bool',
        'verified_looker_employee' => 'bool',
        'looker_versions' => 'string[]',
        'ui_state' => 'map[string,string]',
        'locale' => 'string',
        'url' => 'string',
        'can' => 'map[string,bool]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'first_name' => null,
        'last_name' => null,
        'display_name' => null,
        'email' => null,
        'is_disabled' => null,
        'avatar_url' => 'uri',
        'home_space_id' => null,
        'personal_space_id' => 'int64',
        'embed_group_space_id' => 'int64',
        'access_filters' => null,
        'credentials_email' => null,
        'credentials_totp' => null,
        'credentials_ldap' => null,
        'credentials_google' => null,
        'credentials_saml' => null,
        'credentials_oidc' => null,
        'credentials_api' => null,
        'credentials_api3' => null,
        'credentials_embed' => null,
        'credentials_looker_openid' => null,
        'sessions' => null,
        'role_ids' => 'int64',
        'group_ids' => 'int64',
        'presumed_looker_employee' => null,
        'verified_looker_employee' => null,
        'looker_versions' => null,
        'ui_state' => null,
        'locale' => null,
        'url' => 'uri',
        'can' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'display_name' => 'display_name',
        'email' => 'email',
        'is_disabled' => 'is_disabled',
        'avatar_url' => 'avatar_url',
        'home_space_id' => 'home_space_id',
        'personal_space_id' => 'personal_space_id',
        'embed_group_space_id' => 'embed_group_space_id',
        'access_filters' => 'access_filters',
        'credentials_email' => 'credentials_email',
        'credentials_totp' => 'credentials_totp',
        'credentials_ldap' => 'credentials_ldap',
        'credentials_google' => 'credentials_google',
        'credentials_saml' => 'credentials_saml',
        'credentials_oidc' => 'credentials_oidc',
        'credentials_api' => 'credentials_api',
        'credentials_api3' => 'credentials_api3',
        'credentials_embed' => 'credentials_embed',
        'credentials_looker_openid' => 'credentials_looker_openid',
        'sessions' => 'sessions',
        'role_ids' => 'role_ids',
        'group_ids' => 'group_ids',
        'presumed_looker_employee' => 'presumed_looker_employee',
        'verified_looker_employee' => 'verified_looker_employee',
        'looker_versions' => 'looker_versions',
        'ui_state' => 'ui_state',
        'locale' => 'locale',
        'url' => 'url',
        'can' => 'can'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'display_name' => 'setDisplayName',
        'email' => 'setEmail',
        'is_disabled' => 'setIsDisabled',
        'avatar_url' => 'setAvatarUrl',
        'home_space_id' => 'setHomeSpaceId',
        'personal_space_id' => 'setPersonalSpaceId',
        'embed_group_space_id' => 'setEmbedGroupSpaceId',
        'access_filters' => 'setAccessFilters',
        'credentials_email' => 'setCredentialsEmail',
        'credentials_totp' => 'setCredentialsTotp',
        'credentials_ldap' => 'setCredentialsLdap',
        'credentials_google' => 'setCredentialsGoogle',
        'credentials_saml' => 'setCredentialsSaml',
        'credentials_oidc' => 'setCredentialsOidc',
        'credentials_api' => 'setCredentialsApi',
        'credentials_api3' => 'setCredentialsApi3',
        'credentials_embed' => 'setCredentialsEmbed',
        'credentials_looker_openid' => 'setCredentialsLookerOpenid',
        'sessions' => 'setSessions',
        'role_ids' => 'setRoleIds',
        'group_ids' => 'setGroupIds',
        'presumed_looker_employee' => 'setPresumedLookerEmployee',
        'verified_looker_employee' => 'setVerifiedLookerEmployee',
        'looker_versions' => 'setLookerVersions',
        'ui_state' => 'setUiState',
        'locale' => 'setLocale',
        'url' => 'setUrl',
        'can' => 'setCan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'display_name' => 'getDisplayName',
        'email' => 'getEmail',
        'is_disabled' => 'getIsDisabled',
        'avatar_url' => 'getAvatarUrl',
        'home_space_id' => 'getHomeSpaceId',
        'personal_space_id' => 'getPersonalSpaceId',
        'embed_group_space_id' => 'getEmbedGroupSpaceId',
        'access_filters' => 'getAccessFilters',
        'credentials_email' => 'getCredentialsEmail',
        'credentials_totp' => 'getCredentialsTotp',
        'credentials_ldap' => 'getCredentialsLdap',
        'credentials_google' => 'getCredentialsGoogle',
        'credentials_saml' => 'getCredentialsSaml',
        'credentials_oidc' => 'getCredentialsOidc',
        'credentials_api' => 'getCredentialsApi',
        'credentials_api3' => 'getCredentialsApi3',
        'credentials_embed' => 'getCredentialsEmbed',
        'credentials_looker_openid' => 'getCredentialsLookerOpenid',
        'sessions' => 'getSessions',
        'role_ids' => 'getRoleIds',
        'group_ids' => 'getGroupIds',
        'presumed_looker_employee' => 'getPresumedLookerEmployee',
        'verified_looker_employee' => 'getVerifiedLookerEmployee',
        'looker_versions' => 'getLookerVersions',
        'ui_state' => 'getUiState',
        'locale' => 'getLocale',
        'url' => 'getUrl',
        'can' => 'getCan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['is_disabled'] = isset($data['is_disabled']) ? $data['is_disabled'] : null;
        $this->container['avatar_url'] = isset($data['avatar_url']) ? $data['avatar_url'] : null;
        $this->container['home_space_id'] = isset($data['home_space_id']) ? $data['home_space_id'] : null;
        $this->container['personal_space_id'] = isset($data['personal_space_id']) ? $data['personal_space_id'] : null;
        $this->container['embed_group_space_id'] = isset($data['embed_group_space_id']) ? $data['embed_group_space_id'] : null;
        $this->container['access_filters'] = isset($data['access_filters']) ? $data['access_filters'] : null;
        $this->container['credentials_email'] = isset($data['credentials_email']) ? $data['credentials_email'] : null;
        $this->container['credentials_totp'] = isset($data['credentials_totp']) ? $data['credentials_totp'] : null;
        $this->container['credentials_ldap'] = isset($data['credentials_ldap']) ? $data['credentials_ldap'] : null;
        $this->container['credentials_google'] = isset($data['credentials_google']) ? $data['credentials_google'] : null;
        $this->container['credentials_saml'] = isset($data['credentials_saml']) ? $data['credentials_saml'] : null;
        $this->container['credentials_oidc'] = isset($data['credentials_oidc']) ? $data['credentials_oidc'] : null;
        $this->container['credentials_api'] = isset($data['credentials_api']) ? $data['credentials_api'] : null;
        $this->container['credentials_api3'] = isset($data['credentials_api3']) ? $data['credentials_api3'] : null;
        $this->container['credentials_embed'] = isset($data['credentials_embed']) ? $data['credentials_embed'] : null;
        $this->container['credentials_looker_openid'] = isset($data['credentials_looker_openid']) ? $data['credentials_looker_openid'] : null;
        $this->container['sessions'] = isset($data['sessions']) ? $data['sessions'] : null;
        $this->container['role_ids'] = isset($data['role_ids']) ? $data['role_ids'] : null;
        $this->container['group_ids'] = isset($data['group_ids']) ? $data['group_ids'] : null;
        $this->container['presumed_looker_employee'] = isset($data['presumed_looker_employee']) ? $data['presumed_looker_employee'] : null;
        $this->container['verified_looker_employee'] = isset($data['verified_looker_employee']) ? $data['verified_looker_employee'] : null;
        $this->container['looker_versions'] = isset($data['looker_versions']) ? $data['looker_versions'] : null;
        $this->container['ui_state'] = isset($data['ui_state']) ? $data['ui_state'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name Full name for display (available only if both first_name and last_name are set)
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email EMail address
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool $is_disabled Account has been disabled
     *
     * @return $this
     */
    public function setIsDisabled($is_disabled)
    {
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return string
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param string $avatar_url URL for the avatar image (may be generic)
     *
     * @return $this
     */
    public function setAvatarUrl($avatar_url)
    {
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets home_space_id
     *
     * @return string
     */
    public function getHomeSpaceId()
    {
        return $this->container['home_space_id'];
    }

    /**
     * Sets home_space_id
     *
     * @param string $home_space_id ID string for user's home space
     *
     * @return $this
     */
    public function setHomeSpaceId($home_space_id)
    {
        $this->container['home_space_id'] = $home_space_id;

        return $this;
    }

    /**
     * Gets personal_space_id
     *
     * @return int
     */
    public function getPersonalSpaceId()
    {
        return $this->container['personal_space_id'];
    }

    /**
     * Sets personal_space_id
     *
     * @param int $personal_space_id ID of user's personal space
     *
     * @return $this
     */
    public function setPersonalSpaceId($personal_space_id)
    {
        $this->container['personal_space_id'] = $personal_space_id;

        return $this;
    }

    /**
     * Gets embed_group_space_id
     *
     * @return int
     */
    public function getEmbedGroupSpaceId()
    {
        return $this->container['embed_group_space_id'];
    }

    /**
     * Sets embed_group_space_id
     *
     * @param int $embed_group_space_id (Embed only) ID of user's group space based on the external_group_id optionally specified during embed user login
     *
     * @return $this
     */
    public function setEmbedGroupSpaceId($embed_group_space_id)
    {
        $this->container['embed_group_space_id'] = $embed_group_space_id;

        return $this;
    }

    /**
     * Gets access_filters
     *
     * @return \Swagger\Client\Model\AccessFilter[]
     */
    public function getAccessFilters()
    {
        return $this->container['access_filters'];
    }

    /**
     * Sets access_filters
     *
     * @param \Swagger\Client\Model\AccessFilter[] $access_filters Model access filters.
     *
     * @return $this
     */
    public function setAccessFilters($access_filters)
    {
        $this->container['access_filters'] = $access_filters;

        return $this;
    }

    /**
     * Gets credentials_email
     *
     * @return \Swagger\Client\Model\CredentialsEmail
     */
    public function getCredentialsEmail()
    {
        return $this->container['credentials_email'];
    }

    /**
     * Sets credentials_email
     *
     * @param \Swagger\Client\Model\CredentialsEmail $credentials_email Email/Password login credentials
     *
     * @return $this
     */
    public function setCredentialsEmail($credentials_email)
    {
        $this->container['credentials_email'] = $credentials_email;

        return $this;
    }

    /**
     * Gets credentials_totp
     *
     * @return \Swagger\Client\Model\CredentialsTotp
     */
    public function getCredentialsTotp()
    {
        return $this->container['credentials_totp'];
    }

    /**
     * Sets credentials_totp
     *
     * @param \Swagger\Client\Model\CredentialsTotp $credentials_totp Two-factor credentials
     *
     * @return $this
     */
    public function setCredentialsTotp($credentials_totp)
    {
        $this->container['credentials_totp'] = $credentials_totp;

        return $this;
    }

    /**
     * Gets credentials_ldap
     *
     * @return \Swagger\Client\Model\CredentialsLDAP
     */
    public function getCredentialsLdap()
    {
        return $this->container['credentials_ldap'];
    }

    /**
     * Sets credentials_ldap
     *
     * @param \Swagger\Client\Model\CredentialsLDAP $credentials_ldap LDAP credentials
     *
     * @return $this
     */
    public function setCredentialsLdap($credentials_ldap)
    {
        $this->container['credentials_ldap'] = $credentials_ldap;

        return $this;
    }

    /**
     * Gets credentials_google
     *
     * @return \Swagger\Client\Model\CredentialsGoogle
     */
    public function getCredentialsGoogle()
    {
        return $this->container['credentials_google'];
    }

    /**
     * Sets credentials_google
     *
     * @param \Swagger\Client\Model\CredentialsGoogle $credentials_google Google auth credentials
     *
     * @return $this
     */
    public function setCredentialsGoogle($credentials_google)
    {
        $this->container['credentials_google'] = $credentials_google;

        return $this;
    }

    /**
     * Gets credentials_saml
     *
     * @return \Swagger\Client\Model\CredentialsSaml
     */
    public function getCredentialsSaml()
    {
        return $this->container['credentials_saml'];
    }

    /**
     * Sets credentials_saml
     *
     * @param \Swagger\Client\Model\CredentialsSaml $credentials_saml Saml auth credentials
     *
     * @return $this
     */
    public function setCredentialsSaml($credentials_saml)
    {
        $this->container['credentials_saml'] = $credentials_saml;

        return $this;
    }

    /**
     * Gets credentials_oidc
     *
     * @return \Swagger\Client\Model\CredentialsOIDC
     */
    public function getCredentialsOidc()
    {
        return $this->container['credentials_oidc'];
    }

    /**
     * Sets credentials_oidc
     *
     * @param \Swagger\Client\Model\CredentialsOIDC $credentials_oidc OpenID Connect auth credentials
     *
     * @return $this
     */
    public function setCredentialsOidc($credentials_oidc)
    {
        $this->container['credentials_oidc'] = $credentials_oidc;

        return $this;
    }

    /**
     * Gets credentials_api
     *
     * @return \Swagger\Client\Model\CredentialsApi
     */
    public function getCredentialsApi()
    {
        return $this->container['credentials_api'];
    }

    /**
     * Sets credentials_api
     *
     * @param \Swagger\Client\Model\CredentialsApi $credentials_api API user credentials. NO LONGER SUPPORTED.
     *
     * @return $this
     */
    public function setCredentialsApi($credentials_api)
    {
        $this->container['credentials_api'] = $credentials_api;

        return $this;
    }

    /**
     * Gets credentials_api3
     *
     * @return \Swagger\Client\Model\CredentialsApi3[]
     */
    public function getCredentialsApi3()
    {
        return $this->container['credentials_api3'];
    }

    /**
     * Sets credentials_api3
     *
     * @param \Swagger\Client\Model\CredentialsApi3[] $credentials_api3 API 3 credentials
     *
     * @return $this
     */
    public function setCredentialsApi3($credentials_api3)
    {
        $this->container['credentials_api3'] = $credentials_api3;

        return $this;
    }

    /**
     * Gets credentials_embed
     *
     * @return \Swagger\Client\Model\CredentialsEmbed[]
     */
    public function getCredentialsEmbed()
    {
        return $this->container['credentials_embed'];
    }

    /**
     * Sets credentials_embed
     *
     * @param \Swagger\Client\Model\CredentialsEmbed[] $credentials_embed Embed credentials
     *
     * @return $this
     */
    public function setCredentialsEmbed($credentials_embed)
    {
        $this->container['credentials_embed'] = $credentials_embed;

        return $this;
    }

    /**
     * Gets credentials_looker_openid
     *
     * @return \Swagger\Client\Model\CredentialsLookerOpenid
     */
    public function getCredentialsLookerOpenid()
    {
        return $this->container['credentials_looker_openid'];
    }

    /**
     * Sets credentials_looker_openid
     *
     * @param \Swagger\Client\Model\CredentialsLookerOpenid $credentials_looker_openid LookerOpenID credentials. Used for login by Looker Analysts
     *
     * @return $this
     */
    public function setCredentialsLookerOpenid($credentials_looker_openid)
    {
        $this->container['credentials_looker_openid'] = $credentials_looker_openid;

        return $this;
    }

    /**
     * Gets sessions
     *
     * @return \Swagger\Client\Model\Session[]
     */
    public function getSessions()
    {
        return $this->container['sessions'];
    }

    /**
     * Sets sessions
     *
     * @param \Swagger\Client\Model\Session[] $sessions Active sessions
     *
     * @return $this
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }

    /**
     * Gets role_ids
     *
     * @return int[]
     */
    public function getRoleIds()
    {
        return $this->container['role_ids'];
    }

    /**
     * Sets role_ids
     *
     * @param int[] $role_ids Array of ids of the roles for this user
     *
     * @return $this
     */
    public function setRoleIds($role_ids)
    {
        $this->container['role_ids'] = $role_ids;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return int[]
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param int[] $group_ids Array of ids of the groups for this user
     *
     * @return $this
     */
    public function setGroupIds($group_ids)
    {
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets presumed_looker_employee
     *
     * @return bool
     */
    public function getPresumedLookerEmployee()
    {
        return $this->container['presumed_looker_employee'];
    }

    /**
     * Sets presumed_looker_employee
     *
     * @param bool $presumed_looker_employee User is identified as an employee of Looker
     *
     * @return $this
     */
    public function setPresumedLookerEmployee($presumed_looker_employee)
    {
        $this->container['presumed_looker_employee'] = $presumed_looker_employee;

        return $this;
    }

    /**
     * Gets verified_looker_employee
     *
     * @return bool
     */
    public function getVerifiedLookerEmployee()
    {
        return $this->container['verified_looker_employee'];
    }

    /**
     * Sets verified_looker_employee
     *
     * @param bool $verified_looker_employee User is identified as an employee of Looker who has been verified via Looker corporate authentication
     *
     * @return $this
     */
    public function setVerifiedLookerEmployee($verified_looker_employee)
    {
        $this->container['verified_looker_employee'] = $verified_looker_employee;

        return $this;
    }

    /**
     * Gets looker_versions
     *
     * @return string[]
     */
    public function getLookerVersions()
    {
        return $this->container['looker_versions'];
    }

    /**
     * Sets looker_versions
     *
     * @param string[] $looker_versions Array of strings representing the Looker versions that this user has used (this only goes back as far as '3.54.0')
     *
     * @return $this
     */
    public function setLookerVersions($looker_versions)
    {
        $this->container['looker_versions'] = $looker_versions;

        return $this;
    }

    /**
     * Gets ui_state
     *
     * @return map[string,string]
     */
    public function getUiState()
    {
        return $this->container['ui_state'];
    }

    /**
     * Sets ui_state
     *
     * @param map[string,string] $ui_state Per user dictionary of undocumented state information owned by the Looker UI.
     *
     * @return $this
     */
    public function setUiState($ui_state)
    {
        $this->container['ui_state'] = $ui_state;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Link to get this item
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


