<?php
/**
 * RenderTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Experimental Looker API 3.1 Preview
 *
 * This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RenderTask Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RenderTask implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RenderTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'created_at' => 'string',
        'finalized_at' => 'string',
        'status' => 'string',
        'status_detail' => 'string',
        'user_id' => 'int',
        'runtime' => 'double',
        'query_runtime' => 'double',
        'render_runtime' => 'double',
        'result_format' => 'string',
        'look_id' => 'int',
        'dashboard_id' => 'int',
        'lookml_dashboard_id' => 'string',
        'query_id' => 'int',
        'width' => 'int',
        'height' => 'int',
        'dashboard_style' => 'string',
        'dashboard_filters' => 'string',
        'can' => 'map[string,bool]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'created_at' => null,
        'finalized_at' => null,
        'status' => null,
        'status_detail' => null,
        'user_id' => 'int64',
        'runtime' => 'double',
        'query_runtime' => 'double',
        'render_runtime' => 'double',
        'result_format' => null,
        'look_id' => 'int64',
        'dashboard_id' => 'int64',
        'lookml_dashboard_id' => null,
        'query_id' => 'int64',
        'width' => 'int64',
        'height' => 'int64',
        'dashboard_style' => null,
        'dashboard_filters' => null,
        'can' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'finalized_at' => 'finalized_at',
        'status' => 'status',
        'status_detail' => 'status_detail',
        'user_id' => 'user_id',
        'runtime' => 'runtime',
        'query_runtime' => 'query_runtime',
        'render_runtime' => 'render_runtime',
        'result_format' => 'result_format',
        'look_id' => 'look_id',
        'dashboard_id' => 'dashboard_id',
        'lookml_dashboard_id' => 'lookml_dashboard_id',
        'query_id' => 'query_id',
        'width' => 'width',
        'height' => 'height',
        'dashboard_style' => 'dashboard_style',
        'dashboard_filters' => 'dashboard_filters',
        'can' => 'can'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'finalized_at' => 'setFinalizedAt',
        'status' => 'setStatus',
        'status_detail' => 'setStatusDetail',
        'user_id' => 'setUserId',
        'runtime' => 'setRuntime',
        'query_runtime' => 'setQueryRuntime',
        'render_runtime' => 'setRenderRuntime',
        'result_format' => 'setResultFormat',
        'look_id' => 'setLookId',
        'dashboard_id' => 'setDashboardId',
        'lookml_dashboard_id' => 'setLookmlDashboardId',
        'query_id' => 'setQueryId',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'dashboard_style' => 'setDashboardStyle',
        'dashboard_filters' => 'setDashboardFilters',
        'can' => 'setCan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'finalized_at' => 'getFinalizedAt',
        'status' => 'getStatus',
        'status_detail' => 'getStatusDetail',
        'user_id' => 'getUserId',
        'runtime' => 'getRuntime',
        'query_runtime' => 'getQueryRuntime',
        'render_runtime' => 'getRenderRuntime',
        'result_format' => 'getResultFormat',
        'look_id' => 'getLookId',
        'dashboard_id' => 'getDashboardId',
        'lookml_dashboard_id' => 'getLookmlDashboardId',
        'query_id' => 'getQueryId',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'dashboard_style' => 'getDashboardStyle',
        'dashboard_filters' => 'getDashboardFilters',
        'can' => 'getCan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['finalized_at'] = isset($data['finalized_at']) ? $data['finalized_at'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_detail'] = isset($data['status_detail']) ? $data['status_detail'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['runtime'] = isset($data['runtime']) ? $data['runtime'] : null;
        $this->container['query_runtime'] = isset($data['query_runtime']) ? $data['query_runtime'] : null;
        $this->container['render_runtime'] = isset($data['render_runtime']) ? $data['render_runtime'] : null;
        $this->container['result_format'] = isset($data['result_format']) ? $data['result_format'] : null;
        $this->container['look_id'] = isset($data['look_id']) ? $data['look_id'] : null;
        $this->container['dashboard_id'] = isset($data['dashboard_id']) ? $data['dashboard_id'] : null;
        $this->container['lookml_dashboard_id'] = isset($data['lookml_dashboard_id']) ? $data['lookml_dashboard_id'] : null;
        $this->container['query_id'] = isset($data['query_id']) ? $data['query_id'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['dashboard_style'] = isset($data['dashboard_style']) ? $data['dashboard_style'] : null;
        $this->container['dashboard_filters'] = isset($data['dashboard_filters']) ? $data['dashboard_filters'] : null;
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id of this render task
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at Date/Time render task was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets finalized_at
     *
     * @return string
     */
    public function getFinalizedAt()
    {
        return $this->container['finalized_at'];
    }

    /**
     * Sets finalized_at
     *
     * @param string $finalized_at Date/Time render task was completed
     *
     * @return $this
     */
    public function setFinalizedAt($finalized_at)
    {
        $this->container['finalized_at'] = $finalized_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_detail
     *
     * @return string
     */
    public function getStatusDetail()
    {
        return $this->container['status_detail'];
    }

    /**
     * Sets status_detail
     *
     * @param string $status_detail Additional information about the current status
     *
     * @return $this
     */
    public function setStatusDetail($status_detail)
    {
        $this->container['status_detail'] = $status_detail;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The user account permissions in which the render task will execute
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return double
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param double $runtime Total seconds elapsed for render task
     *
     * @return $this
     */
    public function setRuntime($runtime)
    {
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets query_runtime
     *
     * @return double
     */
    public function getQueryRuntime()
    {
        return $this->container['query_runtime'];
    }

    /**
     * Sets query_runtime
     *
     * @param double $query_runtime Number of seconds elapsed running queries
     *
     * @return $this
     */
    public function setQueryRuntime($query_runtime)
    {
        $this->container['query_runtime'] = $query_runtime;

        return $this;
    }

    /**
     * Gets render_runtime
     *
     * @return double
     */
    public function getRenderRuntime()
    {
        return $this->container['render_runtime'];
    }

    /**
     * Sets render_runtime
     *
     * @param double $render_runtime Number of seconds elapsed rendering data
     *
     * @return $this
     */
    public function setRenderRuntime($render_runtime)
    {
        $this->container['render_runtime'] = $render_runtime;

        return $this;
    }

    /**
     * Gets result_format
     *
     * @return string
     */
    public function getResultFormat()
    {
        return $this->container['result_format'];
    }

    /**
     * Sets result_format
     *
     * @param string $result_format Output format: pdf, png, or jpg
     *
     * @return $this
     */
    public function setResultFormat($result_format)
    {
        $this->container['result_format'] = $result_format;

        return $this;
    }

    /**
     * Gets look_id
     *
     * @return int
     */
    public function getLookId()
    {
        return $this->container['look_id'];
    }

    /**
     * Sets look_id
     *
     * @param int $look_id Id of look to render
     *
     * @return $this
     */
    public function setLookId($look_id)
    {
        $this->container['look_id'] = $look_id;

        return $this;
    }

    /**
     * Gets dashboard_id
     *
     * @return int
     */
    public function getDashboardId()
    {
        return $this->container['dashboard_id'];
    }

    /**
     * Sets dashboard_id
     *
     * @param int $dashboard_id Id of dashboard to render
     *
     * @return $this
     */
    public function setDashboardId($dashboard_id)
    {
        $this->container['dashboard_id'] = $dashboard_id;

        return $this;
    }

    /**
     * Gets lookml_dashboard_id
     *
     * @return string
     */
    public function getLookmlDashboardId()
    {
        return $this->container['lookml_dashboard_id'];
    }

    /**
     * Sets lookml_dashboard_id
     *
     * @param string $lookml_dashboard_id Id of lookml dashboard to render
     *
     * @return $this
     */
    public function setLookmlDashboardId($lookml_dashboard_id)
    {
        $this->container['lookml_dashboard_id'] = $lookml_dashboard_id;

        return $this;
    }

    /**
     * Gets query_id
     *
     * @return int
     */
    public function getQueryId()
    {
        return $this->container['query_id'];
    }

    /**
     * Sets query_id
     *
     * @param int $query_id Id of query to render
     *
     * @return $this
     */
    public function setQueryId($query_id)
    {
        $this->container['query_id'] = $query_id;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int $width Output width in pixels
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height Output height in pixels. Flowed layouts may ignore this value.
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets dashboard_style
     *
     * @return string
     */
    public function getDashboardStyle()
    {
        return $this->container['dashboard_style'];
    }

    /**
     * Sets dashboard_style
     *
     * @param string $dashboard_style Dashboard layout style: single_column or tiled
     *
     * @return $this
     */
    public function setDashboardStyle($dashboard_style)
    {
        $this->container['dashboard_style'] = $dashboard_style;

        return $this;
    }

    /**
     * Gets dashboard_filters
     *
     * @return string
     */
    public function getDashboardFilters()
    {
        return $this->container['dashboard_filters'];
    }

    /**
     * Sets dashboard_filters
     *
     * @param string $dashboard_filters Filter values to apply to the dashboard queries, in URL query format
     *
     * @return $this
     */
    public function setDashboardFilters($dashboard_filters)
    {
        $this->container['dashboard_filters'] = $dashboard_filters;

        return $this;
    }

    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


