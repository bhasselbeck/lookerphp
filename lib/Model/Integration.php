<?php
/**
 * Integration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Experimental Looker API 3.1 Preview
 *
 * This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Integration Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Integration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Integration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'integration_hub_id' => 'int',
        'label' => 'string',
        'description' => 'string',
        'enabled' => 'bool',
        'params' => '\Swagger\Client\Model\IntegrationParam[]',
        'supported_formats' => 'string[]',
        'supported_action_types' => 'string[]',
        'supported_formattings' => 'string[]',
        'supported_visualization_formattings' => 'string[]',
        'supported_download_settings' => 'string[]',
        'icon_url' => 'string',
        'required_fields' => '\Swagger\Client\Model\IntegrationRequiredField[]',
        'can' => 'map[string,bool]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'integration_hub_id' => 'int64',
        'label' => null,
        'description' => null,
        'enabled' => null,
        'params' => null,
        'supported_formats' => null,
        'supported_action_types' => null,
        'supported_formattings' => null,
        'supported_visualization_formattings' => null,
        'supported_download_settings' => null,
        'icon_url' => null,
        'required_fields' => null,
        'can' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'integration_hub_id' => 'integration_hub_id',
        'label' => 'label',
        'description' => 'description',
        'enabled' => 'enabled',
        'params' => 'params',
        'supported_formats' => 'supported_formats',
        'supported_action_types' => 'supported_action_types',
        'supported_formattings' => 'supported_formattings',
        'supported_visualization_formattings' => 'supported_visualization_formattings',
        'supported_download_settings' => 'supported_download_settings',
        'icon_url' => 'icon_url',
        'required_fields' => 'required_fields',
        'can' => 'can'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'integration_hub_id' => 'setIntegrationHubId',
        'label' => 'setLabel',
        'description' => 'setDescription',
        'enabled' => 'setEnabled',
        'params' => 'setParams',
        'supported_formats' => 'setSupportedFormats',
        'supported_action_types' => 'setSupportedActionTypes',
        'supported_formattings' => 'setSupportedFormattings',
        'supported_visualization_formattings' => 'setSupportedVisualizationFormattings',
        'supported_download_settings' => 'setSupportedDownloadSettings',
        'icon_url' => 'setIconUrl',
        'required_fields' => 'setRequiredFields',
        'can' => 'setCan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'integration_hub_id' => 'getIntegrationHubId',
        'label' => 'getLabel',
        'description' => 'getDescription',
        'enabled' => 'getEnabled',
        'params' => 'getParams',
        'supported_formats' => 'getSupportedFormats',
        'supported_action_types' => 'getSupportedActionTypes',
        'supported_formattings' => 'getSupportedFormattings',
        'supported_visualization_formattings' => 'getSupportedVisualizationFormattings',
        'supported_download_settings' => 'getSupportedDownloadSettings',
        'icon_url' => 'getIconUrl',
        'required_fields' => 'getRequiredFields',
        'can' => 'getCan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['integration_hub_id'] = isset($data['integration_hub_id']) ? $data['integration_hub_id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['params'] = isset($data['params']) ? $data['params'] : null;
        $this->container['supported_formats'] = isset($data['supported_formats']) ? $data['supported_formats'] : null;
        $this->container['supported_action_types'] = isset($data['supported_action_types']) ? $data['supported_action_types'] : null;
        $this->container['supported_formattings'] = isset($data['supported_formattings']) ? $data['supported_formattings'] : null;
        $this->container['supported_visualization_formattings'] = isset($data['supported_visualization_formattings']) ? $data['supported_visualization_formattings'] : null;
        $this->container['supported_download_settings'] = isset($data['supported_download_settings']) ? $data['supported_download_settings'] : null;
        $this->container['icon_url'] = isset($data['icon_url']) ? $data['icon_url'] : null;
        $this->container['required_fields'] = isset($data['required_fields']) ? $data['required_fields'] : null;
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the integration.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets integration_hub_id
     *
     * @return int
     */
    public function getIntegrationHubId()
    {
        return $this->container['integration_hub_id'];
    }

    /**
     * Sets integration_hub_id
     *
     * @param int $integration_hub_id ID of the integration hub.
     *
     * @return $this
     */
    public function setIntegrationHubId($integration_hub_id)
    {
        $this->container['integration_hub_id'] = $integration_hub_id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Label for the integration.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the integration.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Whether the integration is available to users.
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets params
     *
     * @return \Swagger\Client\Model\IntegrationParam[]
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \Swagger\Client\Model\IntegrationParam[] $params Array of params for the integration.
     *
     * @return $this
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets supported_formats
     *
     * @return string[]
     */
    public function getSupportedFormats()
    {
        return $this->container['supported_formats'];
    }

    /**
     * Sets supported_formats
     *
     * @param string[] $supported_formats A list of data formats the integration supports. Valid values are: \"txt\", \"csv\", \"inline_json\", \"json\", \"json_detail\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\".
     *
     * @return $this
     */
    public function setSupportedFormats($supported_formats)
    {
        $this->container['supported_formats'] = $supported_formats;

        return $this;
    }

    /**
     * Gets supported_action_types
     *
     * @return string[]
     */
    public function getSupportedActionTypes()
    {
        return $this->container['supported_action_types'];
    }

    /**
     * Sets supported_action_types
     *
     * @param string[] $supported_action_types A list of action types the integration supports. Valid values are: \"cell\", \"query\", \"dashboard\".
     *
     * @return $this
     */
    public function setSupportedActionTypes($supported_action_types)
    {
        $this->container['supported_action_types'] = $supported_action_types;

        return $this;
    }

    /**
     * Gets supported_formattings
     *
     * @return string[]
     */
    public function getSupportedFormattings()
    {
        return $this->container['supported_formattings'];
    }

    /**
     * Sets supported_formattings
     *
     * @param string[] $supported_formattings A list of formatting options the integration supports. Valid values are: \"formatted\", \"unformatted\".
     *
     * @return $this
     */
    public function setSupportedFormattings($supported_formattings)
    {
        $this->container['supported_formattings'] = $supported_formattings;

        return $this;
    }

    /**
     * Gets supported_visualization_formattings
     *
     * @return string[]
     */
    public function getSupportedVisualizationFormattings()
    {
        return $this->container['supported_visualization_formattings'];
    }

    /**
     * Sets supported_visualization_formattings
     *
     * @param string[] $supported_visualization_formattings A list of visualization formatting options the integration supports. Valid values are: \"apply\", \"noapply\".
     *
     * @return $this
     */
    public function setSupportedVisualizationFormattings($supported_visualization_formattings)
    {
        $this->container['supported_visualization_formattings'] = $supported_visualization_formattings;

        return $this;
    }

    /**
     * Gets supported_download_settings
     *
     * @return string[]
     */
    public function getSupportedDownloadSettings()
    {
        return $this->container['supported_download_settings'];
    }

    /**
     * Sets supported_download_settings
     *
     * @param string[] $supported_download_settings A list of streaming options the integration supports. Valid values are: \"push\", \"url\".
     *
     * @return $this
     */
    public function setSupportedDownloadSettings($supported_download_settings)
    {
        $this->container['supported_download_settings'] = $supported_download_settings;

        return $this;
    }

    /**
     * Gets icon_url
     *
     * @return string
     */
    public function getIconUrl()
    {
        return $this->container['icon_url'];
    }

    /**
     * Sets icon_url
     *
     * @param string $icon_url URL to an icon for the integration.
     *
     * @return $this
     */
    public function setIconUrl($icon_url)
    {
        $this->container['icon_url'] = $icon_url;

        return $this;
    }

    /**
     * Gets required_fields
     *
     * @return \Swagger\Client\Model\IntegrationRequiredField[]
     */
    public function getRequiredFields()
    {
        return $this->container['required_fields'];
    }

    /**
     * Sets required_fields
     *
     * @param \Swagger\Client\Model\IntegrationRequiredField[] $required_fields A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field.
     *
     * @return $this
     */
    public function setRequiredFields($required_fields)
    {
        $this->container['required_fields'] = $required_fields;

        return $this;
    }

    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


