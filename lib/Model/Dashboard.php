<?php
/**
 * Dashboard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Looker
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Experimental Looker API 3.1 Preview
 *
 * This API 3.1 is in active development. Breaking changes are likely to occur to some API functions in future Looker releases until API 3.1 is officially launched and upgraded to beta status.  If you have time and interest to experiment with new or modified services exposed in this embryonic API 3.1, we welcome your participation and feedback!  For large development efforts or critical line-of-business projects, we strongly recommend you stick with the API 3.0 while API 3.1 is under construction.
 *
 * OpenAPI spec version: 3.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Looker\Model;

use \ArrayAccess;
use \Looker\ObjectSerializer;

/**
 * Dashboard Class Doc Comment
 *
 * @category Class
 * @package  Looker
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Dashboard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Dashboard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'content_metadata_id' => 'int',
        'content_favorite_id' => 'int',
        'view_count' => 'int',
        'last_accessed_at' => '\DateTime',
        'favorite_count' => 'int',
        'user_id' => 'int',
        'title' => 'string',
        'description' => 'string',
        'readonly' => 'bool',
        'hidden' => 'bool',
        'refresh_interval' => 'string',
        'refresh_interval_to_i' => 'int',
        'space' => '\Looker\Model\SpaceBase',
        'load_configuration' => 'string',
        'model' => '\Looker\Model\LookModel',
        'space_id' => 'string',
        'dashboard_elements' => '\Looker\Model\DashboardElement[]',
        'dashboard_layouts' => '\Looker\Model\DashboardLayout[]',
        'dashboard_filters' => '\Looker\Model\DashboardFilter[]',
        'last_viewed_at' => '\DateTime',
        'background_color' => 'string',
        'show_title' => 'bool',
        'title_color' => 'string',
        'show_filters_bar' => 'bool',
        'tile_background_color' => 'string',
        'tile_text_color' => 'string',
        'text_tile_text_color' => 'string',
        'last_updater_id' => 'int',
        'deleter_id' => 'int',
        'deleted' => 'bool',
        'created_at' => '\DateTime',
        'deleted_at' => '\DateTime',
        'query_timezone' => 'string',
        'edit_uri' => 'string',
        'can' => 'map[string,bool]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'content_metadata_id' => 'int64',
        'content_favorite_id' => 'int64',
        'view_count' => 'int64',
        'last_accessed_at' => 'date-time',
        'favorite_count' => 'int64',
        'user_id' => 'int64',
        'title' => null,
        'description' => null,
        'readonly' => null,
        'hidden' => null,
        'refresh_interval' => null,
        'refresh_interval_to_i' => 'int64',
        'space' => null,
        'load_configuration' => null,
        'model' => null,
        'space_id' => null,
        'dashboard_elements' => null,
        'dashboard_layouts' => null,
        'dashboard_filters' => null,
        'last_viewed_at' => 'date-time',
        'background_color' => null,
        'show_title' => null,
        'title_color' => null,
        'show_filters_bar' => null,
        'tile_background_color' => null,
        'tile_text_color' => null,
        'text_tile_text_color' => null,
        'last_updater_id' => 'int64',
        'deleter_id' => 'int64',
        'deleted' => null,
        'created_at' => 'date-time',
        'deleted_at' => 'date-time',
        'query_timezone' => null,
        'edit_uri' => 'uri',
        'can' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'content_metadata_id' => 'content_metadata_id',
        'content_favorite_id' => 'content_favorite_id',
        'view_count' => 'view_count',
        'last_accessed_at' => 'last_accessed_at',
        'favorite_count' => 'favorite_count',
        'user_id' => 'user_id',
        'title' => 'title',
        'description' => 'description',
        'readonly' => 'readonly',
        'hidden' => 'hidden',
        'refresh_interval' => 'refresh_interval',
        'refresh_interval_to_i' => 'refresh_interval_to_i',
        'space' => 'space',
        'load_configuration' => 'load_configuration',
        'model' => 'model',
        'space_id' => 'space_id',
        'dashboard_elements' => 'dashboard_elements',
        'dashboard_layouts' => 'dashboard_layouts',
        'dashboard_filters' => 'dashboard_filters',
        'last_viewed_at' => 'last_viewed_at',
        'background_color' => 'background_color',
        'show_title' => 'show_title',
        'title_color' => 'title_color',
        'show_filters_bar' => 'show_filters_bar',
        'tile_background_color' => 'tile_background_color',
        'tile_text_color' => 'tile_text_color',
        'text_tile_text_color' => 'text_tile_text_color',
        'last_updater_id' => 'last_updater_id',
        'deleter_id' => 'deleter_id',
        'deleted' => 'deleted',
        'created_at' => 'created_at',
        'deleted_at' => 'deleted_at',
        'query_timezone' => 'query_timezone',
        'edit_uri' => 'edit_uri',
        'can' => 'can'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'content_metadata_id' => 'setContentMetadataId',
        'content_favorite_id' => 'setContentFavoriteId',
        'view_count' => 'setViewCount',
        'last_accessed_at' => 'setLastAccessedAt',
        'favorite_count' => 'setFavoriteCount',
        'user_id' => 'setUserId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'readonly' => 'setReadonly',
        'hidden' => 'setHidden',
        'refresh_interval' => 'setRefreshInterval',
        'refresh_interval_to_i' => 'setRefreshIntervalToI',
        'space' => 'setSpace',
        'load_configuration' => 'setLoadConfiguration',
        'model' => 'setModel',
        'space_id' => 'setSpaceId',
        'dashboard_elements' => 'setDashboardElements',
        'dashboard_layouts' => 'setDashboardLayouts',
        'dashboard_filters' => 'setDashboardFilters',
        'last_viewed_at' => 'setLastViewedAt',
        'background_color' => 'setBackgroundColor',
        'show_title' => 'setShowTitle',
        'title_color' => 'setTitleColor',
        'show_filters_bar' => 'setShowFiltersBar',
        'tile_background_color' => 'setTileBackgroundColor',
        'tile_text_color' => 'setTileTextColor',
        'text_tile_text_color' => 'setTextTileTextColor',
        'last_updater_id' => 'setLastUpdaterId',
        'deleter_id' => 'setDeleterId',
        'deleted' => 'setDeleted',
        'created_at' => 'setCreatedAt',
        'deleted_at' => 'setDeletedAt',
        'query_timezone' => 'setQueryTimezone',
        'edit_uri' => 'setEditUri',
        'can' => 'setCan'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'content_metadata_id' => 'getContentMetadataId',
        'content_favorite_id' => 'getContentFavoriteId',
        'view_count' => 'getViewCount',
        'last_accessed_at' => 'getLastAccessedAt',
        'favorite_count' => 'getFavoriteCount',
        'user_id' => 'getUserId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'readonly' => 'getReadonly',
        'hidden' => 'getHidden',
        'refresh_interval' => 'getRefreshInterval',
        'refresh_interval_to_i' => 'getRefreshIntervalToI',
        'space' => 'getSpace',
        'load_configuration' => 'getLoadConfiguration',
        'model' => 'getModel',
        'space_id' => 'getSpaceId',
        'dashboard_elements' => 'getDashboardElements',
        'dashboard_layouts' => 'getDashboardLayouts',
        'dashboard_filters' => 'getDashboardFilters',
        'last_viewed_at' => 'getLastViewedAt',
        'background_color' => 'getBackgroundColor',
        'show_title' => 'getShowTitle',
        'title_color' => 'getTitleColor',
        'show_filters_bar' => 'getShowFiltersBar',
        'tile_background_color' => 'getTileBackgroundColor',
        'tile_text_color' => 'getTileTextColor',
        'text_tile_text_color' => 'getTextTileTextColor',
        'last_updater_id' => 'getLastUpdaterId',
        'deleter_id' => 'getDeleterId',
        'deleted' => 'getDeleted',
        'created_at' => 'getCreatedAt',
        'deleted_at' => 'getDeletedAt',
        'query_timezone' => 'getQueryTimezone',
        'edit_uri' => 'getEditUri',
        'can' => 'getCan'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['content_metadata_id'] = isset($data['content_metadata_id']) ? $data['content_metadata_id'] : null;
        $this->container['content_favorite_id'] = isset($data['content_favorite_id']) ? $data['content_favorite_id'] : null;
        $this->container['view_count'] = isset($data['view_count']) ? $data['view_count'] : null;
        $this->container['last_accessed_at'] = isset($data['last_accessed_at']) ? $data['last_accessed_at'] : null;
        $this->container['favorite_count'] = isset($data['favorite_count']) ? $data['favorite_count'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['readonly'] = isset($data['readonly']) ? $data['readonly'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['refresh_interval'] = isset($data['refresh_interval']) ? $data['refresh_interval'] : null;
        $this->container['refresh_interval_to_i'] = isset($data['refresh_interval_to_i']) ? $data['refresh_interval_to_i'] : null;
        $this->container['space'] = isset($data['space']) ? $data['space'] : null;
        $this->container['load_configuration'] = isset($data['load_configuration']) ? $data['load_configuration'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['space_id'] = isset($data['space_id']) ? $data['space_id'] : null;
        $this->container['dashboard_elements'] = isset($data['dashboard_elements']) ? $data['dashboard_elements'] : null;
        $this->container['dashboard_layouts'] = isset($data['dashboard_layouts']) ? $data['dashboard_layouts'] : null;
        $this->container['dashboard_filters'] = isset($data['dashboard_filters']) ? $data['dashboard_filters'] : null;
        $this->container['last_viewed_at'] = isset($data['last_viewed_at']) ? $data['last_viewed_at'] : null;
        $this->container['background_color'] = isset($data['background_color']) ? $data['background_color'] : null;
        $this->container['show_title'] = isset($data['show_title']) ? $data['show_title'] : null;
        $this->container['title_color'] = isset($data['title_color']) ? $data['title_color'] : null;
        $this->container['show_filters_bar'] = isset($data['show_filters_bar']) ? $data['show_filters_bar'] : null;
        $this->container['tile_background_color'] = isset($data['tile_background_color']) ? $data['tile_background_color'] : null;
        $this->container['tile_text_color'] = isset($data['tile_text_color']) ? $data['tile_text_color'] : null;
        $this->container['text_tile_text_color'] = isset($data['text_tile_text_color']) ? $data['text_tile_text_color'] : null;
        $this->container['last_updater_id'] = isset($data['last_updater_id']) ? $data['last_updater_id'] : null;
        $this->container['deleter_id'] = isset($data['deleter_id']) ? $data['deleter_id'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['query_timezone'] = isset($data['query_timezone']) ? $data['query_timezone'] : null;
        $this->container['edit_uri'] = isset($data['edit_uri']) ? $data['edit_uri'] : null;
        $this->container['can'] = isset($data['can']) ? $data['can'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets content_metadata_id
     *
     * @return int
     */
    public function getContentMetadataId()
    {
        return $this->container['content_metadata_id'];
    }

    /**
     * Sets content_metadata_id
     *
     * @param int $content_metadata_id Id of content metadata
     *
     * @return $this
     */
    public function setContentMetadataId($content_metadata_id)
    {
        $this->container['content_metadata_id'] = $content_metadata_id;

        return $this;
    }

    /**
     * Gets content_favorite_id
     *
     * @return int
     */
    public function getContentFavoriteId()
    {
        return $this->container['content_favorite_id'];
    }

    /**
     * Sets content_favorite_id
     *
     * @param int $content_favorite_id Content Favorite Id
     *
     * @return $this
     */
    public function setContentFavoriteId($content_favorite_id)
    {
        $this->container['content_favorite_id'] = $content_favorite_id;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return int
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param int $view_count Number of times viewed in the Looker web UI
     *
     * @return $this
     */
    public function setViewCount($view_count)
    {
        $this->container['view_count'] = $view_count;

        return $this;
    }

    /**
     * Gets last_accessed_at
     *
     * @return \DateTime
     */
    public function getLastAccessedAt()
    {
        return $this->container['last_accessed_at'];
    }

    /**
     * Sets last_accessed_at
     *
     * @param \DateTime $last_accessed_at Time the dashboard was last accessed
     *
     * @return $this
     */
    public function setLastAccessedAt($last_accessed_at)
    {
        $this->container['last_accessed_at'] = $last_accessed_at;

        return $this;
    }

    /**
     * Gets favorite_count
     *
     * @return int
     */
    public function getFavoriteCount()
    {
        return $this->container['favorite_count'];
    }

    /**
     * Sets favorite_count
     *
     * @param int $favorite_count Number of times favorited
     *
     * @return $this
     */
    public function setFavoriteCount($favorite_count)
    {
        $this->container['favorite_count'] = $favorite_count;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id Id of User
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Look Title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool $readonly Is Read-only
     *
     * @return $this
     */
    public function setReadonly($readonly)
    {
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden Is Hidden
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets refresh_interval
     *
     * @return string
     */
    public function getRefreshInterval()
    {
        return $this->container['refresh_interval'];
    }

    /**
     * Sets refresh_interval
     *
     * @param string $refresh_interval Refresh Interval
     *
     * @return $this
     */
    public function setRefreshInterval($refresh_interval)
    {
        $this->container['refresh_interval'] = $refresh_interval;

        return $this;
    }

    /**
     * Gets refresh_interval_to_i
     *
     * @return int
     */
    public function getRefreshIntervalToI()
    {
        return $this->container['refresh_interval_to_i'];
    }

    /**
     * Sets refresh_interval_to_i
     *
     * @param int $refresh_interval_to_i Refresh Interval as Integer
     *
     * @return $this
     */
    public function setRefreshIntervalToI($refresh_interval_to_i)
    {
        $this->container['refresh_interval_to_i'] = $refresh_interval_to_i;

        return $this;
    }

    /**
     * Gets space
     *
     * @return \Looker\Model\SpaceBase
     */
    public function getSpace()
    {
        return $this->container['space'];
    }

    /**
     * Sets space
     *
     * @param \Looker\Model\SpaceBase $space Space
     *
     * @return $this
     */
    public function setSpace($space)
    {
        $this->container['space'] = $space;

        return $this;
    }

    /**
     * Gets load_configuration
     *
     * @return string
     */
    public function getLoadConfiguration()
    {
        return $this->container['load_configuration'];
    }

    /**
     * Sets load_configuration
     *
     * @param string $load_configuration configuration option that governs how dashboard loading will happen.
     *
     * @return $this
     */
    public function setLoadConfiguration($load_configuration)
    {
        $this->container['load_configuration'] = $load_configuration;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \Looker\Model\LookModel
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \Looker\Model\LookModel $model Model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets space_id
     *
     * @return string
     */
    public function getSpaceId()
    {
        return $this->container['space_id'];
    }

    /**
     * Sets space_id
     *
     * @param string $space_id Id of Space
     *
     * @return $this
     */
    public function setSpaceId($space_id)
    {
        $this->container['space_id'] = $space_id;

        return $this;
    }

    /**
     * Gets dashboard_elements
     *
     * @return \Looker\Model\DashboardElement[]
     */
    public function getDashboardElements()
    {
        return $this->container['dashboard_elements'];
    }

    /**
     * Sets dashboard_elements
     *
     * @param \Looker\Model\DashboardElement[] $dashboard_elements Elements
     *
     * @return $this
     */
    public function setDashboardElements($dashboard_elements)
    {
        $this->container['dashboard_elements'] = $dashboard_elements;

        return $this;
    }

    /**
     * Gets dashboard_layouts
     *
     * @return \Looker\Model\DashboardLayout[]
     */
    public function getDashboardLayouts()
    {
        return $this->container['dashboard_layouts'];
    }

    /**
     * Sets dashboard_layouts
     *
     * @param \Looker\Model\DashboardLayout[] $dashboard_layouts Layouts
     *
     * @return $this
     */
    public function setDashboardLayouts($dashboard_layouts)
    {
        $this->container['dashboard_layouts'] = $dashboard_layouts;

        return $this;
    }

    /**
     * Gets dashboard_filters
     *
     * @return \Looker\Model\DashboardFilter[]
     */
    public function getDashboardFilters()
    {
        return $this->container['dashboard_filters'];
    }

    /**
     * Sets dashboard_filters
     *
     * @param \Looker\Model\DashboardFilter[] $dashboard_filters Filters
     *
     * @return $this
     */
    public function setDashboardFilters($dashboard_filters)
    {
        $this->container['dashboard_filters'] = $dashboard_filters;

        return $this;
    }

    /**
     * Gets last_viewed_at
     *
     * @return \DateTime
     */
    public function getLastViewedAt()
    {
        return $this->container['last_viewed_at'];
    }

    /**
     * Sets last_viewed_at
     *
     * @param \DateTime $last_viewed_at Time last viewed in the Looker web UI
     *
     * @return $this
     */
    public function setLastViewedAt($last_viewed_at)
    {
        $this->container['last_viewed_at'] = $last_viewed_at;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string $background_color Background color
     *
     * @return $this
     */
    public function setBackgroundColor($background_color)
    {
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets show_title
     *
     * @return bool
     */
    public function getShowTitle()
    {
        return $this->container['show_title'];
    }

    /**
     * Sets show_title
     *
     * @param bool $show_title Show title
     *
     * @return $this
     */
    public function setShowTitle($show_title)
    {
        $this->container['show_title'] = $show_title;

        return $this;
    }

    /**
     * Gets title_color
     *
     * @return string
     */
    public function getTitleColor()
    {
        return $this->container['title_color'];
    }

    /**
     * Sets title_color
     *
     * @param string $title_color Title color
     *
     * @return $this
     */
    public function setTitleColor($title_color)
    {
        $this->container['title_color'] = $title_color;

        return $this;
    }

    /**
     * Gets show_filters_bar
     *
     * @return bool
     */
    public function getShowFiltersBar()
    {
        return $this->container['show_filters_bar'];
    }

    /**
     * Sets show_filters_bar
     *
     * @param bool $show_filters_bar Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user'Ls ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://docs.looker.com/admin-options/tutorials/permissions#control_user_access_to_data)
     *
     * @return $this
     */
    public function setShowFiltersBar($show_filters_bar)
    {
        $this->container['show_filters_bar'] = $show_filters_bar;

        return $this;
    }

    /**
     * Gets tile_background_color
     *
     * @return string
     */
    public function getTileBackgroundColor()
    {
        return $this->container['tile_background_color'];
    }

    /**
     * Sets tile_background_color
     *
     * @param string $tile_background_color Tile background color
     *
     * @return $this
     */
    public function setTileBackgroundColor($tile_background_color)
    {
        $this->container['tile_background_color'] = $tile_background_color;

        return $this;
    }

    /**
     * Gets tile_text_color
     *
     * @return string
     */
    public function getTileTextColor()
    {
        return $this->container['tile_text_color'];
    }

    /**
     * Sets tile_text_color
     *
     * @param string $tile_text_color Tile text color
     *
     * @return $this
     */
    public function setTileTextColor($tile_text_color)
    {
        $this->container['tile_text_color'] = $tile_text_color;

        return $this;
    }

    /**
     * Gets text_tile_text_color
     *
     * @return string
     */
    public function getTextTileTextColor()
    {
        return $this->container['text_tile_text_color'];
    }

    /**
     * Sets text_tile_text_color
     *
     * @param string $text_tile_text_color Color of text on text tiles
     *
     * @return $this
     */
    public function setTextTileTextColor($text_tile_text_color)
    {
        $this->container['text_tile_text_color'] = $text_tile_text_color;

        return $this;
    }

    /**
     * Gets last_updater_id
     *
     * @return int
     */
    public function getLastUpdaterId()
    {
        return $this->container['last_updater_id'];
    }

    /**
     * Sets last_updater_id
     *
     * @param int $last_updater_id Id of User that last updated the dashboard.
     *
     * @return $this
     */
    public function setLastUpdaterId($last_updater_id)
    {
        $this->container['last_updater_id'] = $last_updater_id;

        return $this;
    }

    /**
     * Gets deleter_id
     *
     * @return int
     */
    public function getDeleterId()
    {
        return $this->container['deleter_id'];
    }

    /**
     * Sets deleter_id
     *
     * @param int $deleter_id Id of User that deleted the dashboard.
     *
     * @return $this
     */
    public function setDeleterId($deleter_id)
    {
        $this->container['deleter_id'] = $deleter_id;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted Whether or not a dashboard is deleted.
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Time that the Dashboard was created.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at Time that the Dashboard was deleted.
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets query_timezone
     *
     * @return string
     */
    public function getQueryTimezone()
    {
        return $this->container['query_timezone'];
    }

    /**
     * Sets query_timezone
     *
     * @param string $query_timezone Timezone in which the Dashboard will run by default.
     *
     * @return $this
     */
    public function setQueryTimezone($query_timezone)
    {
        $this->container['query_timezone'] = $query_timezone;

        return $this;
    }

    /**
     * Gets edit_uri
     *
     * @return string
     */
    public function getEditUri()
    {
        return $this->container['edit_uri'];
    }

    /**
     * Sets edit_uri
     *
     * @param string $edit_uri Relative path of URI of LookML file to edit the dashboard (LookML dashboard only).
     *
     * @return $this
     */
    public function setEditUri($edit_uri)
    {
        $this->container['edit_uri'] = $edit_uri;

        return $this;
    }

    /**
     * Gets can
     *
     * @return map[string,bool]
     */
    public function getCan()
    {
        return $this->container['can'];
    }

    /**
     * Sets can
     *
     * @param map[string,bool] $can Operations the current user is able to perform on this object
     *
     * @return $this
     */
    public function setCan($can)
    {
        $this->container['can'] = $can;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


